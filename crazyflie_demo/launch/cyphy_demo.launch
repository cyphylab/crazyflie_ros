<?xml version="1.0"?>
<launch>
  <arg name="uri" default="radio://0/100/2M/E7E7E7E7E7" /> <!--Adjust this parameter-->
  <arg name="frame" default="cf1" /> <!--For OptiTrack users: frame name should match the Rigid-body name on Motive-->
  <arg name="ip" default="192.168.254.1" /> <!--Adjust this parameter-->
  <arg name="port" default="3883" />

  <include file="$(find crazyflie_driver)/launch/crazyflie_server.launch">
  </include>



<!--
=================================================================================================
     Run vrpn client
     This connects to the optitrack server and produces pose messages regarding the CF
-->
<node pkg="vrpn_client_ros" type="vrpn_client_node" name="vrpn_client_node" output="screen">
<rosparam subst_value="true">
  server: $(arg ip)
  port: $(arg port)
  update_frequency: 360.0
  frame_id: /world
  child_frame_id: $(arg frame)
  use_server_time: false
  broadcast_tf: false
  refresh_tracker_frequency: 1.0
</rosparam>
</node>


  <group ns="cf1">
    <node pkg="crazyflie_driver" type="crazyflie_add" name="crazyflie_add" output="screen">
      <param name="uri" value="$(arg uri)" />
      <param name="tf_prefix" value="cf1" />
      <param name="enable_logging" value="True" />
      <param name="enable_logging_imu" value="False" />
      <param name="enable_logging_temperature" value="False" />
      <param name="enable_logging_magnetic_field" value="False" />
      <param name="enable_logging_pressure" value="False" />
      <param name="enable_logging_battery" value="False" />
      <param name="enable_logging_packets" value="False" />
      <param name="enable_logging_pose" value="False" /> 
      <rosparam>
        genericLogTopics: ["logEkfMocap"]
        genericLogTopicFrequencies: [100]
        genericLogTopic_logEkfMocap_Variables: ["ekf_usc.x", "ekf_usc.z", "ekf_usc.q0", "ekf_usc.q1", "ekf_usc.q2"]
      </rosparam>
    </node>


    <!--
    Publish the extarnal position information to a topic, such that it's feedforward to the CF filter
    -->
    <node name="pose" pkg="crazyflie_demo" type="publish_external_position_vrpn.py" output="screen"> 
      <param name="topic" value="vrpn_client_node/cf1/pose" />
    </node>

    <!--
    Set up the vehicle, selecting the Commander Level, Estimation Algorithm and Control Algorithm
    -->
    <node name="setup_vehicle" pkg="crazyflie_demo" type="setup_vehicle" output="screen">
        <param name="_cf" value="$(arg frame)" />
        <param name="_comm_lev" value='1' />
        <param name="_Estimator" value="EKF" />
        <param name="_ResEstimator" value='1' />
        <param name="_Controller" value="Mellinger" />
    </node>

    <!-- =================================================================================================
         These nodes are passive, they listen to topics and they publish on odometry topics, which can be 
            represented in rviz, or in other visualization tool
    -->
    <!-- Publish the Ghost odometry -->
    <node name="Odometry" pkg="crazyflie_demo" type="publish_odometry" output="screen"> 
      <param name="ghostNrate" value="30" />
    </node>

    <!-- Publish the Estimated odometry -->
    <node name="Est_Odometry" pkg="crazyflie_demo" type="publish_kalman_odometry.py" output="screen"> 
    </node>


    <node pkg="tf" type="static_transform_publisher" name="baselink_broadcaster" args="0 0 0 0 0 0 1 $(arg frame) /world 100" />
  </group>

  
    <!-- =================================================================================================
        Visualization with RVIZ 
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find crazyflie_demo)/launch/cyphy_rviz.rviz" /> 
-->

    -->
    <!-- =================================================================================================
        Bag recording 
    -->
  <node pkg="rosbag" name="record" type="record" args="-o /home/cyphy/workspace_luigi/bags/cf1 /cf1/log_kalman /cf1/logEkfMocap /cf1/vrpn_client_node/cf1/pose /ghost_trajectory"/>

</launch>
